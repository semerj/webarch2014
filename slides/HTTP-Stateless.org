* HTTP, part duex :slide:

* Announcements :slide:
  + Online class next week
  + madlibs: Grades this coming week

* Review :slide:
  [[file:img/overview.png]]
  + Client (eg. browser) makes a request for a URL
  + Connects to a web server (eg. ischool, or =app.py=) using TCP/IP
  + Sends HTTP commands and headers
  + The server associates the path with a resource
  + Then sends a representation back to the client as a reply
  + The client interprets the reply (eg. HTML), renders it, runs Javascript
  + Repeat
** Next :notes:
   + Could connect to any web server in a data center, racks of machines
   + TCP/IP covered next week: it is a way to transfer raw data
   + What does an HTTP command start with? method (eg. GET POST etc)
   + What's the header we used in HW? Host

* URL :slide:
http://people.ischool.berkeley.edu/~jblomo/webarch2014/index.html
** Questions :notes:
   + URLs start with a? schema
   + How to know what machine to connect to? host/server name

* HTTP :slide:
#+begin_src bash
telnet 128.32.78.16 80
GET /~jblomo/webarch2014/index.html HTTP/1.1
Host: people.ischool.berkeley.edu


HTTP/1.1 200 OK
Date: Fri, 20 Sep 2013 06:29:22 GMT
Server: Apache/2.2.22 (Fedora)
Last-Modified: Fri, 20 Sep 2013 06:28:44 GMT
ETag: "b7f00d0-a5-4e6cac83bff00"
Accept-Ranges: bytes
Content-Length: 165
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html>
<html>
    <head>
        <title>Jim's Page</title>
    </head>
    <body>
        <p>Hello class! This is a tiny HTML page.</p>
    </body>
</html>
#+end_src
** Questions :notes:
   + Sends back HTML
   + How does the browser organize the HTML? What kind of datastructure?  DOM/tree
   + Know how to write the DOM tree
   + At a high level, how would we use Javascript to change the color of the
     paragraph text?
   + Where does the Javascript run to do this? 
   + At a high level, how would we implement infinite scroll on this page?
   + What protocol would be used to fetch more content?

* Protocols and State :slide:
  + State :: associated information
  + Stateful :: Interpretation depends on history of actions
  + Stateless :: Commands cannot access history
** State :notes:
   + State is information associated with some item that determines how you can
     interact with it
   + Light switch has state: which position is it in
   + Coin flips do not have state: doesn't matter what previous flips were
   + We'll be talking about state at many levels: if a resource has state, if a
     protocol has state, building stateless protocols on stateful protocols

* Telephone Protocol :slide:
  + Bank: must identify yourself for each request
  + Family: can instantly recognize you, resume conversation where it left off
** Metaphor :notes:
   + Calling a bank is generally stateless. Each time you call, must identify
     yourself.
   + Often, even when you transfer to another dept for another question, but
     identify again
   + If you get disconnected, can you just call right back and expect to
     continue?
   + vs. family: can continue a conversation. Generally stateful
   + What is one of the main reasons for the difference? Why is one stateful,
   another not?
   + who specifically you are talking to. Calling a bank could talk to any
     individual. Very similar

* SSH/Terminal is Stateful :slide:
  + Relative directories depend on previous =cd= commands
  + Interactive sessions
  + Don't have to resend login information each command

* HTTP is Stateless :slide:
  + Must specify full context each request
    + Absolute path
    + Hostname
    + Cookies*
  + Current request doesn't depend on history
  + Even on open connections, actual commands are stateless
** Notes :notes:
   + HTTP/1.1 keeps an open connection, but doesn't change the commands,
     headers, content required for the request
   + When making requests for images on a page, still must ask for absolute path
   + *Cookies will be covered in 2 weeks

* HTML over HTTP :slide:
#+begin_src html
<img src="img/raptor-genie.jpg">
#+end_src
  + Relative or absolute?
  + How does the browser request this image?
** Answers :notes:
   + =src= has a relative path
   + Browser appends relative path to current URL, then makes HTTP request
   + HTTP request is for the absolute path

* Paths in HTML & HTTP :slide:
  + HTTP :: Absolute paths
  + HTML :: Absolute or relative paths
  + Browser :: Translates relative paths with current URL + relative
** Translation :notes:
   + Browser translates relative paths in HTML to absolute paths in HTTP request

* Stateless Trade-offs :slide:
  + State requires space and coordination
  + State inherent in many applications
    + So it must be handled by client
    + Most common: authentication
** Managing State :notes:
  + Future lecture will focus on managing state in DBs
  + In general, you need multiple disks to dependably store state
  + Stateless means you don't have to coordinate
    + Easily scale without coordination
  + Authentication: must send credentials each time, but browser mostly handles
    it

* Authentication :slide:animate:
  + What user is making the request?
  + Should the server "remember" who is making the request?
  + No! Browser will always send authorization information
** Where? :notes:
   + Associate with an IP? No, what about users from the same building?
   + Where should we send authentication information in a request? (for normal
     pages, not login form
   + Headers: metadata about request, eg. who is sending it?

* Application State :slide:
  + Just because the *protocol* is *stateless*
  + doesn't mean the *application* can't be *stateful*
  + Information about user stored, explicitly transmitted
** Databases :notes:
   + Databases are typically used to store info, we will cover them later in
     class
   + When looking at an individual request, we send all required information
   + Just like we build styling on top of semantics (CSS on HTML), build
     stateful application on stateless protocol
   + Like a telephone call (pre-mobile): you have to introduce yourself each
     time, but after introducing yourself I can remember details about you

* Fun with HTTP Status Codes :slide:two_col:
  + =418= :: I'm a teapot (for HyperText Coffee Pot Control Protocol)
  + =420= :: Enhance Your Calm (Similar to =429 Too Many Requests=)

[[file:img/coffee-pot.jpg]]

From [[http://en.wikipedia.org/wiki/List_of_HTTP_status_codes][List of HTTP status codes]]
** Last week :notes:
   + (Transition)
   + We talked about response codes last week, here are a couple fun ones

* Static vs. Dynamic Webpage :slide:
  + Static web pages are files that don't change
  + Dynamic web pages get generated by the server
  + Dynamic is an overloaded term
** Dynamic :notes:
   + Unfortunately, a few things can mean "dynamic"
   + web pages (what we're talking about, generated by server)
   + DHTML: basically javascript (an attempt at a buzzword. We're not talking
     about that right now)

* Trade-offs :slide:
  + Static pages can be read off disk quickly
  + Static pages can be served out of RAM even faster
  + Dynamic pages can change
  + Dynamic pages may use less space
** Reasons :notes:
   + No computation needed
   + RAM can "cache" frequently needed pages
   + But static pages can't change (by definition)
   + And static pages have to be stored with their full HTML

* How fast? :slide:
[[file:img/test-nginx-1worker.png]]
[[file:img/dynamic-throughput.png]]
  + compare "Hello World"s both static & Dynamic

* Why should resources change? :slide:animate:
  + Your "own" profile page
  + Updates (new reviews, activity feed)
  + Permissions
  + External data source
** Get examples :notes:
   + Customized home page: recommendations, etc.
   + New activity that you want to see. How boring would a static feed be?
   + Maybe someone only recently gave you permissions to view a resource
   + Getting the current weather
   + Resource have state: GET request for whattimeisit.com

* Craigslist :slide:two_col:
  + Every ad has a page
  + Users can create and remove ads
  + Ad pages have text, pictures, etc.
  [[file:img/craig-newmark.jpg]]
** How to implement :notes:
   + Case study: different ways to implement Craigslist

* Static Serving :slide:
  + Every ad uploaded generates an HTML file
  + When a user requests http://craigslist.org/ad-0001.html serve the file
  + CSS & Javascript also static files
** Trade-offs? :notes:
   + Very fast serving
   + Simple to write, understand
   + No database dependencies
   + Easier to backup? Just copy files
   + Less flexible: How do you change the template?
   + Less normalized: how can you data-mine your ads?
   + More space: repeat the Head HTML over and over

* Dynamic Serving :slide:
  + Every ad uploaded, text kept in a database
  + When a user requests http://craigslist.org/ad-0001.html generate an HTML
    response
  + Response template is like madlibs: fill in the blanks
** Trade-offs :notes:
   + Slower to serve: have to calculate response
   + More complex to write: must interact with other libraries
   + Database dependency: DB must be up to serve traffic
   + Backup different systems: data, templates, code. How to backup DB?
   + More flexible: instantly change the template
   + Data separated from presentation: can mine, transform, annotate, modify
     data
   + Less space: Just the data and the template once

* Requirements :slide:
  + The data will be frequently modified by the user
  + Must serve pages as cheaply as possible
  + Must be able to copy pages to another server
  + Designers must iterate on site design
  + Like Wikipedia, must create links to new pages in old
** Advantage :notes:
   + Dynamic
   + Static
   + Static
   + Dynamic
   + Dynamic

* What does Yelp do? :slide:animate:
  + Both!
  + Data stored in a database
  + When users request page, generate it
  + But also cache it!
  + So the next time, it can be served like a file*
** Caching :notes:
   + We'll discuss caching in another lecture
   + Caches are not exactly HTML files on disk
   + Usually stored in RAM

* CSS and Javascript? :slide:
  + Still static
  + Fairly rare that those assets are dynamically generated
  + Exception: some images

** HTML :slide:
[[file:img/most-interesting-html.jpg]]

** Systems :slide:
[[file:img/most-interesting-systems.jpg]]

** Philosoraptor :slide:
[[file:img/raptor-genie.jpg]]


#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="production/common.css" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="production/screen.css" media="screen" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="production/projection.css" media="projection" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="production/color-blue.css" media="projection" />
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="production/presenter.css" media="presenter" />
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Lobster+Two:700|Yanone+Kaffeesatz:700|Open+Sans' rel='stylesheet' type='text/css'>

#+BEGIN_HTML
<script type="text/javascript" src="production/org-html-slideshow.js"></script>
#+END_HTML

# Local Variables:
# org-export-html-style-include-default: nil
# org-export-html-style-include-scripts: nil
# buffer-file-coding-system: utf-8-unix
# End:
